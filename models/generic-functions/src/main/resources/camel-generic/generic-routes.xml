<?xml version="1.0" encoding="UTF-8"?>
<routes xmlns="http://camel.apache.org/schema/spring">
	<route id="receiveMetricsAMQJson">
		<from id="receiveMetricsAMQJsonStarter" uri="{{inputEndpoint}}" />
		<log id="logBodyContent" message="metadata verifed ${body}" />
		<unmarshal id="parseJson">
			<json id="tradeProcessingDurationJson" library="Jackson"
				unmarshalTypeName="{{indicatorClass}}" />
		</unmarshal>
		<inOnly id="toStoreIndicator" uri="direct:storeIndicator" />
		<to id="call" uri="direct:receiveMetricsGeneric" />
	</route>
	<route id="receiveMetricsGeneric">
		<from id="receiveMetricsGenericStarter" uri="direct:receiveMetricsGeneric" />
		<setProperty id="_setProperty1" propertyName="originalBean">
			<simple>${body}</simple>
		</setProperty>
		<setBody id="_setBody3">
			<method method="createIndicatorRecord(${property.originalBean})"
				ref="genericObjectFactory" />
		</setBody>
		<marshal id="_marshal1">
			<serialization />
		</marshal>
		<to id="toUpdateStat" uri="activemq:queue:app.stats.updatestats" />
	</route>
	<!-- store the raw POJO -->
	<route id="storeIndicatorRoute">
		<from id="storeIndicatorStarter" uri="direct:storeIndicator" />
		<setHeader headerName="eventTimestmp"
			id="setEventTimestampForStoreIndicatorRoute">
			<simple>${body.timestmp}</simple>
		</setHeader>
		<log id="logBody" message="trying to store pojo of type ${body.class} ${body.uid}" />
		<setHeader headerName="CamelInfinispanKey" id="_setHeader1">
			<simple>${body.uid}</simple>
		</setHeader>
		<setHeader headerName="CamelInfinispanCacheName" id="_setHeader2">
			<constant>tradeProcessingDuration</constant>
		</setHeader>
		<setHeader headerName="CamelInfinispanOperation" id="_setHeader3">
			<constant>CamelInfinispanOperationPut</constant>
		</setHeader>
		<setHeader headerName="CamelInfinispanValue" id="_setHeader4">
			<simple>${body}</simple>
		</setHeader>
		<to id="_to1" uri="{{datagrid}}" />
	</route>
	<route id="queryRoute">
		<from id="_from2" uri="direct:queryRoute" />
		<log id="_log1" message="Query      headers : ${headers}" />
		<setHeader headerName="__cacheName" id="_setHeader7">
			<constant>tradeProcessingDuration</constant>
		</setHeader>
		<setHeader headerName="__type" id="_setHeader8">
			<constant>{{indicatorClass}}</constant>
		</setHeader>
		<process id="_process1" ref="queryProcessor" />
	</route>
	<route id="queryProjectionRoute">
		<from id="_from4" uri="direct:queryProjectionRoute" />
		<log id="_log2" message="Query      headers : ${headers}" />
		<setHeader headerName="__cacheName" id="_setHeader6">
			<constant>tradeProcessingDuration</constant>
		</setHeader>
		<setHeader headerName="__type" id="_setHeader9">
			<constant>{{indicatorClass}}</constant>
		</setHeader>
		<process id="_process2" ref="queryWithProjectionProcessor" />
	</route>
	<route id="queryRouteJms">
		<from id="_from3"
			uri="activemq:queue:app.query.{{indicatorClassName}}?exchangePattern=InOut" />
		<to id="_to3" pattern="InOut" uri="direct:queryRoute" />
		<marshal id="_marshal2">
			<json library="Jackson" />
		</marshal>
		<convertBodyTo id="_convertBodyTo1" type="java.lang.String" />
	</route>
	<route id="queryWithProjectionRouteJms">
		<from id="_from5"
			uri="activemq:queue:app.query.projection.{{indicatorClassName}}?exchangePattern=InOut" />
		<to id="_to4" pattern="InOut" uri="direct:queryProjectionRoute" />
		<marshal id="_marshal3">
			<json library="Jackson" />
		</marshal>
		<convertBodyTo id="_convertBodyTo2" type="java.lang.String" />
	</route>
</routes>
