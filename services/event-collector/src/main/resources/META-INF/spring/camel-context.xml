<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="     
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd      
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd 
          http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd ">
	<bean class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"
		id="props">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:app.properties</value>
				<value>file:app.properties</value>
				<value>file:${karaf.home}/etc/app.properties</value>
				<value>file:etc/app.properties</value>
			</list>
		</property>
	</bean>

	<bean class="org.apache.activemq.broker.BrokerService" destroy-method="stop" init-method="start">
		<property name="transportConnectorURIs">
			<list>
				<value>tcp://0.0.0.0:61670</value>
			</list>
		</property>
		<property name="persistent" value="false"></property>
		<property name="useJmx" value="true" />
		<property name="brokerId" value="eventbrk" />
		<property name="brokerName" value="eventbrk" />
	</bean>

	<!-- <amq:broker persistent="false" useJmx="true" xmlns:amq="http://activemq.apache.org/schema/core"> 
		<amq:transportConnectors> <amq:transportConnector uri="tcp://0.0.0.0:61670"/> 
		</amq:transportConnectors> </amq:broker> -->
	<!-- Internal InfiniSpan cache -->
	<bean class="org.infinispan.manager.DefaultCacheManager"
		destroy-method="stop" id="cacheManager" init-method="start">
		<constructor-arg type="java.lang.String" value="infinispan.xml" />
	</bean>
	<!-- Embedded data base -->
	<bean class="org.h2.tools.Server" destroy-method="stop"
		factory-method="createTcpServer" id="h2db" init-method="start">
		<constructor-arg
			value="-tcp,-tcpAllowOthers,-tcpPort,8643,-baseDir,./h2dbstore" />
	</bean>
	<bean class="org.h2.tools.Server" destroy-method="stop" depends-on="h2db"
		factory-method="createWebServer" id="h2Server" init-method="start"
		lazy-init="false">
		<constructor-arg
			value="-web,-webAllowOthers,-webPort,11111,-baseDir,./h2dbstore" />
	</bean>
	<bean class="org.apache.activemq.camel.component.ActiveMQComponent"
		id="activemq">
		<property name="brokerURL" value="${brokerUrl}" />
		<property name="userName" value="${brokerUsr}" />
		<property name="password" value="${brokerPwd}" />
	</bean>
	<!-- ########################################################### -->
	<!-- Database configs -->
	<!-- ########################################################### -->
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" id="dataSource">
		<property name="driverClassName" value="${dbDriver}" />
		<property name="url" value="${dbUrl}" />
		<property name="username" value="${dbUser}" />
		<property name="password" value="${dbPwd}" />
	</bean>
	<bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="com.redhat.empowered.generic.model.GenericObjectFactory"
		id="genericObjectFactory" />
	<bean
		class="com.redhat.empowered.generic.processors.TriggerMetricCalculation"
		id="triggerMetricCalculation">
		<constructor-arg ref="cacheManager" />
		<constructor-arg value="metric" />
		<constructor-arg ref="genericObjectFactory" />
	</bean>
	<camelContext id="event-collector" xmlns="http://camel.apache.org/schema/spring">
		<endpoint id="datagrid" uri="infinispan://{{dgUrl}}" />
		<restConfiguration bindingMode="json" component="netty4-http"
			enableCORS="true" port="7123" />
		<rest id="svc" path="/">
			<get id="serverTimeOp" uri="serverTime">
				<to uri="direct:serverTimeOp" />
			</get>
			<get id="clearCacheOp" uri="clearCache/{cacheName}">
				<to uri="direct:clearCacheOp" />
			</get>
			<get id="queryOp" uri="{cacheName}/{uid}">
				<to uri="direct:queryOp" />
			</get>
		</rest>
		<route id="serverTime">
			<from id="_from1" uri="direct:serverTimeOp" />
			<setBody id="_setBody1">
				<simple>${date:now:yyyyMMddHHmmss.SSS}</simple>
			</setBody>
		</route>
		<route id="clearCacheRoute">
			<from id="_from2" uri="direct:clearCacheOp" />
			<setHeader headerName="CamelInfinispanCacheName" id="_setHeader1">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation" id="_setHeader2">
				<constant>CamelInfinispanOperationClear</constant>
			</setHeader>
			<to id="_to1" ref="datagrid" />
			<setBody id="_setBody2">
				<simple>${headers.cacheName} cleared!</simple>
			</setBody>
		</route>
		<!-- rest service to query events -->
		<route id="queryOpRoute">
			<from id="queryOpStarter" uri="direct:queryOp" />
			<setHeader headerName="CamelInfinispanKey" id="_setHeader3">
				<simple>${headers.uid}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanCacheName" id="_setHeader4">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation" id="_setHeader5">
				<constant>CamelInfinispanOperationGet</constant>
			</setHeader>
			<to id="_to2" ref="datagrid" />
			<setBody id="_setBody3">
				<simple>${header.CamelInfinispanOperationResult}</simple>
			</setBody>
		</route>
		<!-- calculating metrics -->
		<route id="calculateMetrics">
			<from id="calculateMetricsStarter"
				uri="activemq:queue:app.stats.updatestats?acknowledgementModeName=CLIENT_ACKNOWLEDGE" />
			<unmarshal id="_unmarshal1">
				<serialization />
			</unmarshal>
			<log id="_log1"
				message="trying to process pojo of type ${body.class} - ${body.indicatorValue}" />
			<setHeader headerName="eventTimestmp" id="_setHeader6">
				<simple>${body.timestmp}</simple>
			</setHeader>
			<setHeader headerName="key" id="_setHeader7">
				<simple>${body.indicatorClass}.hourly.${date:header.eventTimestmp:yyyyMMddHH}</simple>
			</setHeader>
			<process id="_process1" ref="triggerMetricCalculation" />
			<setHeader headerName="key" id="_setHeader8">
				<simple>${body.indicatorClass}.daily.${date:header.eventTimestmp:yyyyMMdd}</simple>
			</setHeader>
			<process id="_process2" ref="triggerMetricCalculation" />
			<setHeader headerName="key" id="_setHeader9">
				<simple>${body.indicatorClass}.monthly.${date:header.eventTimestmp:yyyyMM}</simple>
			</setHeader>
			<process id="_process3" ref="triggerMetricCalculation" />
		</route>
		<!-- Init Database -->
<!-- 		<route id="initDBRoute" startupOrder="1">
			<from id="initDBStarter" uri="timer:initDB?repeatCount=1&amp;delay=-1" />
			<to id="_to3" uri="sql:classpath:sql/createIndicatorRecord.sql" />
			<log id="_log2" message="DB initialized!" />
		</route> -->
	</camelContext>
</beans>
